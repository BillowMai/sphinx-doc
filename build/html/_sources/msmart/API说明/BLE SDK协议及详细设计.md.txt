# BLE SDK协议

* LE SDK解析处理《M-Smart BLE应用协议》（下简称《协议》）及下级协议规范的逻辑与动作。SDK不处理应用逻辑，如涉及到逻辑操作，交由应用层、适配层处理

# BLE SDK详细设计

## 用KEIL工程制作静态库  （TODO:微清支持结束后，在这里总结）

linux下，使用.sh脚本编译，分析其宏定义：
.sh
read CONFIG_MS_BLE_OTA_VALUE  //用户选择（Y/N）
CONFIG_MS_BLE_OTA=${CONFIG_MS_BLE_OTA_VALUE}  //新定义了CONFIG_MS_BLE_OTA

makefile:
CONFIG_MS_BLE_OTA --> MS_CONFIG_BLE_OTA_SUPPORT //新定义了MS_CONFIG_BLE_OTA_SUPPORT
编译链加入OTA相关.c文件

.c：
#ifdef MS_CONFIG_BLE_OTA_SUPPORT //do something

所以，如果使用KEIL，并想启用OTA，则需要：

* 根据makefile添加相关.c文件到KEIL工程中
* 在KEIL选项中添加MS_CONFIG_BLE_OTA_SUPPORT

linux编译生成的文件如下，供KEIL参考，发布给用户。

/data/maill/msdk-compiler-link/2021-03-11-exp32-LED/xtensa-esp32s2-elf/bin/xtensa-esp32s2-elf-

/data/maill/msdk_compiler_tool/2021-03-11-exp32-LED/xtensa-esp32s2-elf

```
├── msdk_esp32
│   ├── ms_ble_adapter
│   │   └── inc
│   │       ├── ms_sal_ble_base.h
│   │       ├── ms_sal_ble_common.h
│   │       └── ms_sal_ble_peripheral.h
│   ├── ms_ble_gatt
│   │   └── inc
│   │       ├── ms_ble_base.h
│   │       ├── ms_ble_common.h
│   │       ├── ms_ble_peripheral.h
│   │       └── mSDK_list.h
│   ├── ms_ble_lib
│   │   ├── libBleSdkBase.a
│   │   └── libBleSdkBle.a
│   ├── platform.mk
│   └── readme.md
```

## M-Smart BLE 应用协议（仅供IoT内部阅读）

http://confluence.msmart.com/pages/viewpage.action?pageId=17144836

# BLE配网流程 （重要）

1. Dev广播
2. Dev与APP进行GATT交互
3. APP发0x01, 密钥协商, 一共发两次
4. APP发0x63,获取Dev SN和Mac信息
5. APP发0x69,发送SSID和PWD给Dev
6. Dev进行广域网入网流程（与BLE无关）
7. Dev发0x0D,告知APP入网结果

# BLE Log解析

[MS_BLE]read one valid pkg  //BLE收到一帧有效数据

[MS_BLE]63_0D ble 0x0d msg //0x0D - WiFi连接状态主动上报
[01 01 00 ]
01-默认，
01-    登陆云过程
0x00：未有配网信息
0x01：连接路由中
0x02：DNS解析中(连接路由成功)
0x03：登陆服务器中
0x04：登陆成功
00-错误码表，0表示无错误

# BLE_SDK 更新记录

## 2021-03-05，新命令0xA2

### 新命令 MS_BLE_CMD_DT_NOTIFY_TRANSMIT = 0xA2

data notify to app/gateway

* 用户调用`ms_ble_app_msg_handle()`，发送事件MS_BLE_EVENT_TASK_NOTIFY_TRANSMIT
* SDK最终调用 `ms_ble_dt_notify_send(uint8_t *p_data, uint8_t p_len)` ,组命令帧：MS_BLE_CMD_DT_NOTIFY_TRANSMIT=0xA2（新添加），并发送给APP。

### 新命令 MS_BLE_CMD_DEV_CONFIRM = 0x66

## 2021-04-07，微清探针，新分支no-bind

密钥交互成功后，取消绑定流程(无需从APP获取设备ID), 直接强制设为已绑定状态，user即可进行DT操作。

主要改动点：

* ms_ble_ecdh_key_interaction() 密钥交互成功，强制设定为绑定状态，并通知user。
* user无需提供设备ID适配层函数(因为绑定流程已取消，无设备ID)

`

## 2021-05-17, 蓝牙联动场景，添加不可连接广播 - nonconn-adv

> 尚未发布：分支：develop_solv_2.2
>
> 协议相关：BLE 不可连接广播协议

添加宏定义：MS_CONFIG_BLE_NONCONN_SUPPORT

添加了相关文件： ms_ble_cipher.c,  mSDK_crc32.c,  mSDK_rc4.c

添加文档： MSDK_ble编译选择文档.docx， 参考该文档制作库。


| **宏** | **宏定义** |   |
| :- | :- | - |
| MS_CONFIG_BLE_PERIPHERAL_SUPPORT | 外设角色定义 |   |
| MS_CONFIG_BLE_CENTRAL_SUPPORT | 集中器角色定义 |   |
| MS_CONFIG_BLE_WIFI_SUPPORT | Wi-Fi配网功能 | 单BLE下不可用 |
| MS_CONFIG_BLE_OTA_SUPPORT | BLE OTA功能 |   |
| MS_CONFIG_BLE_DT_SUPPORT | 蓝牙直连功能 | 即透传功能 |
| MS_CONFIG_BLE_NOBIND_SUPPORT | 无绑定功能 |   |
| MS_CONFIG_BLE_RCU_SUPPORT | 遥控器功能 | 非msmart协议，暂时无用 |
| ==MS_CONFIG_BLE_NONCONN_SUPPORT== | 电控广播功能 | **用于蓝牙联动场景（部分需求）** |

主要修改：

1. 用户事件添加了以下开始/停止不可连接广播，注意，该操作上电后即可调用，无需等待美居绑定。

   用户数据最大长度为16字节，比如用于广播温度等信息。

```c
{ MS_BLE_EVENT_NONCONN_ADV_START,     //!< start nonconn adv
  MS_BLE_EVENT_NONCONN_ADV_STOP,     //!< stop nonconn adv
} ms_ble_event_to_sdk_e;
```

2. 接收端，集中器上电后，开启扫描广播，如果集中器支持蓝牙联动，则，将扫描到的数据包传给SDK接口，由SDK解析

```c
ms_ble_scan_error_e ms_ble_scan_nonconn_adv_parse(int8_t rssi, uint8_t *p_mac, uint8_t *p_buf, uint8_t p_len, ms_ble_scan_noncon_parse_t *p_parsed_data);
```

# SDK接收流程解析

用户将BLE收到的数据放入这个函数，该函数按BLE协议解析数据（含加解密）。

`ms_ble_read_buffer_handle(uint8_t *p_data, uint16_t p_len, uint16_t *offset, ms_ble_service_e p_service)`

如果是外设，则调用外设RX处理流程处理

`ms_ble_peripheral_gatt_cmd_handle()`

判断数据中的命令，根据BLE协议的FF80/90下的命令号，调用相应的处理函数，这些命令号与函数的关系定义在如下列表中，比如收到的是01命令则调用ms_ble_ecdh_key_interaction回调函数进一步处理数据

const ms_ble_data_cmd_t t_peripheral_cfg_cmd_table[] = {
{MS_BLE_CMD_ECDH_KEY_INTERACTION, ms_ble_ecdh_key_interaction},

以上接收流程完成了

但有些命令需要应答APP，比如查询设备信息，则在上面的回调函数中，调用组帧和发送。

`ms_ble_gatt_cmd_data_send(ms_ble_protocol_cmd_t *p_data, ms_ble_service_e p_service)`

* ms_ble_read_buffer_handle的数据格式分析，（难分析，但可反向分析发送数据)

```
COMMON_DBG_TRACE("ms_ble_read_buffer_handle[%d-%x %x]",p_len,p_data[0],p_data[1]); //p_data=m_data
msg.tid = m_data[3];
msg.cmd = m_data[4];   ///FF80 01/69 : 01/69为命令
msg.len = m_data[2] - (HEAD_LEN_GATT - 2);
msg.data = &m_data[5];
```

* 发送数据格式 - 反推上面的接收数据格式

```
    m_temp_buf[0] = 0xAA;
    m_temp_buf[1] = 0x55;
    m_temp_buf[2] = m_temp_buf_len - 2;
    m_temp_buf[3] = p_data->tid;
    m_temp_buf[4] = p_data->cmd;
```

# OTA 固件升级功能

> 协议书：M-Smart蓝牙固件OTA协议  ——GATT方式
>
> 概括：蓝牙OTA升级即模组OTA（非电控OTA),

流程概要：

1. 用户提供OTA适配层接口，如flash读/写/擦除等
2. 如A/B区方案，收到新固件放入B区
3. 将app启动地址改指向B区(用户需要bootloader支持A/B区方案)
4. app发启动升级指令，设备重启，跑B区新固件，Done

关键步骤及工具：

1. OTA固件打包器
   1. 升级包放入打包器目录下
   2. 编辑脚本ble_ota_bin.bat，添加升级包名称和生成物名称
   3. 执行脚本，生成OTA升级包（根据协议书生成header)
2. OTA升级包命名
   1. 叶楚汉
3. 专用ISO美居APP下载
   1. 找谁？
4. 模组端OTA功能是否已实现
   1. 代码确认

---

---

---

---

---

---
