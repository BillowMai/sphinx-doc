# M-Smart相关

## SST - 智能设备安全传输承载协议

> 文档见：M-Smart SST修改方案_20180307

SST智能设备安全传输承载协议主要用于保障设备与云端、设备与APP之间以及设备与设备之间的安全传输


## FA配网 

1. 从NAN通道(像极了NFC)获取配网信息，无需确权。

2. 从鸿蒙UDP通道(AP模式)获取配网信息，需要确权。
   (2021-01-21)
   
3. Hi-3861单wifi产品，自带鸿蒙系统，支持NAN，AP和UDP配网

4. 对于WB01非鸿蒙系统，则需要移植FA SDK，并使用BLE或AP配网。

   (2022-03-04)

## License & MAC

------

License与IMEI或Wi-Fi/BLE MAC一一对应，烧录于模组，用于鉴别Midea产品和安全。1个MAC地址对应1个License。

License大小2kBytes, **MAC**地址位于Licnese中的指定位置, MSDK代码会在初始化时会自检。

申请流程：

1. 准备MAC地址列表
2. 登录Midea License申请网站，提供MAC地址列表
3. Midea负责人审核并生成License列表及安全工具
4. 将License下载到相应MAC地址的模组
   (2021-04-07)



License文件, 以MAC命名，502DBBF475F7.bin，名称中MAC地址为**大端格式**(高字节在前，低字节在后)

License内容，第[1:6]字节为MAC地址，同文件名，也是大端格式

nRF Connect软件， 显示扫描设备的MAC地址为大端格式

BLE标准MAC地址为小端格式，即0x502DBBF475F7   -> F7 75 F4 BB 2D 50

BLE SDK适配层get_mac接口应按BLE标准顺序(小端)返回





## ProductKey

------

产品KEY是在开发者平台创建产品时产生的(**代表一个类型的产品??**)
ProductKey和设备信息等会上报云端(开发者平台)做合法性验证，通过验证后才能进一步使用/调用模组内的MSDK广域网组件
建议用户加密存储

<font color = red>
License ,ProductKey, SN 的区别：  
</font>

> License是验证硬件合法性
> ProductKey是验证产品合法性(一类产品)
> SN码 分配给一个产品的

## 设备类型

device_type，四字节，由家电协议A0指令下发给模组，四字节含义如下：

| 0    | 0-7  | 保留                                                         |
| ---- | ---- | ------------------------------------------------------------ |
| 1    | 0-7  | 家电主类型，按照标准的协议内的家电类型，框架的家电类型同时填写自己的类型  (品类码) |
| 2    | 0-7  | 家电型号代码低字节，每个事业部不同的型号代码表可不同         |
| 3    | 0-7  | 家电型号代码高字节                                           |



## SN & SN8

SN码(32 bytes),  是创建产品后批量申请的，每个产品只能使用一个SN码, 美居通过SN码找到云端相应的产品信息和插件等。

**SN8(RSQ1111111)与SN的关系：**

:------------------------------------------------------------------------------------:

SN                 ：          品类码             SN8              序列号             安全码
SN1（ASCII）： 000K    E2   341 RSQ11111   280000000         H5D9

SN2（ASCII）： 000K    E2   341 RSQ11111    280000001         M672

:                      |--------------[0-27]:产品电子ID码------------|--[28-31]安全码 --|

:------------------------------------------------------------------------------------:

用SN8区分产品，通过SN8我们可以通过某些平台找到这个产品的信息

> SN前28字节为**产品电子ID码**，由阿拉伯数字0～9和大写英文字母A～Z（除去I，O）表示。
>
> SN后4字节为**安全码**，由阿拉伯数字0-9和大小写英文字母A-Z、a-z表示。

## AP热点名称规则

* 售后模式的AP热点名称：midea_sh_xxxx 或 midea_test_xxxx， xxxx为空调WiFi模块的MAC地址最后4位，默认密码为：12345678
* 正常模式的AP热点名称：midea_xx_xxxx,  xx为品类码，xxxx为随机码
* 用户初始化时可自定义前缀(示例是midea)，非midea或bugu，最大长度为9字节。

## BLE名称规则

BLE统一命名为midea，用户初始化时可自定义。

## SDK检验(0x0008命令)


| 1字节 | 2字节        | 32字节 | 32字节     | 32字节            |
| ----- | ------------ | ------ | ---------- | ----------------- |
| 品类  | 家电型号代码 | 设备SN | ProductKey | ~~ProductSecret~~ |
|       |              |        |            |                   |

SDK校验只是NS校验产品的合法性，并不是校验SDK代码的完整性。
所以说，这些数据都要跟平台上的数据一致。

## 绑定&确权 - BLE

在配网过程中，用户产生确权动作后，设备才能绑定。

## 数据备份 - BLE

收到64，分两种情况：

1. 切换模式，重新开始配网，且已前确权，10分钟内要完成配网。

对于已绑定的设备，重新开始配网前，先保存当前配网信息，再开始新的配网。

当新的配网失败时，则***恢复旧的配网信息***。

当新的配网成功时，保存新的配网信息。

2. 确权，纯确权指令。

## 国家码与信道表

> 资料：http://confluence.msmart.com/pages/viewpage.action?pageId=66153480
>
> 中国国家码及信道：https://blog.csdn.net/dxpqxb/article/details/80969760

在BLE/AP配网过程中，配网信息帧包含了国家码和信道表（BLE 69指令，AP 0070指令）。

如果是新的国家，则需要事业部驻外人员联系当地厂商或无线管理局获取信道表，并提供云端同事，加入对该国家的支持。

## OTA-MSDK1.0

MSDK1.0只支持OTA V1, 不支持OTA V2.

SDK->用户事件:

`ENUM_MS_NETAPP_EVENT_REQUEST_NEW_VERSION` - 升级版本信息推送

> * OTA-V1:模组静默升级，仅支持多媒体固件升级方式，检测是否有升级包的时序：测服1分钟/2分钟检测，生产15分钟/24小时检测.
>
> 注1：开发者获取到URL后，自行通过Http协议下载固件；
> 注2：为确保安全，开发者需对欲下载固件的合法性及完整性做校验

相关示例代码：

```
ms_net_test.c:
case: ENUM_MS_NETAPP_EVENT_REQUEST_NEW_VERSION
  MS_TRACE("you need upgrade now!!!");
  MS_TRACE("version is");
  PRINT_BUF(version, version_len);
  MS_TRACE("url is");      ///获得固件url下载地址（用户自行下载固件，并自行实现升级逻辑）
  PRINT_BUF(url, url_len);
  MS_TRACE("md5 is");
  PRINT_BUF(md5, md5_len);
```



## 固件基线版本要求

即新需求基于哪个固件版本进行开发，外部需求由需求方提出，产品经
理审核；通用固件由产品经理定义

> 固件版本是否有格式说明？TODO

## SN  & CVV校验

CVV校验作用是防止非法设备接入美的云              

SN编码规则：（文档见：QM-J010.0014-2021 终端产品条码规则(原标准号：QM-J010.0014-2020).doc）

![](image/MSmart%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8/image-20211015113429441.png)

长度：  -(4)   品类码(2)   - (3)    SN8(8)             生产日期(4)    序列(7)      安全码(4)

字节：  1-4     5-6             7-9     10-17               18-21             22-28              29-32

SN  ： 8710    14             310    ETA35001         1728              0000000        YGTP

智能连接内部测试SN划分：

* SN内32位字符的第19位为月份，取值范围：0-9/A/B/C，该范围为集团SN标准规范内的使用范围，避开此范围即可。
* 为避免各团队使用SN冲突风险，SN第19位固定为：研发-“0”（数字），研测-“T”，品测-“Z”，FAE - "F"



>  给其它事业部测试用的SN:  000012111Q10000001 F 41 DEM0 018 0000

> SN码，总长度32bytes, 根据代码判断，SVV做了以下校验：
>
> [0-27] : 28bytes,  产品电子ID码，由阿拉伯数字0～9和大写英文字母A～Z（除去I，O）表示。
>
> [28-31] : 4bytes, 安全码，由阿拉伯数字0-9和大小写英文字母A-Z、a-z表示。

## 售后反写SN功能

(实际是：重写SN/重绑SN)

售后APP可以重新给电控板写入SN功能

PRD: 智能产品支持更换主板后在新主板写入SN或重绑SN，具有写入SN或重绑SN功能，确保智能产品能继续正常使用。

反写SN大致流程：电控按键/遥控器->WIFI模组进入售后模式->起热点(AP)->手机售后软件连接热点->手机发送新SN指令(cmd=0020透传)->WIFI模组收到并透传给电控(cmd=0F空调SN查询/写入)->电控保存->重启。

代码相关：aftersales

msmart2.0 application自带

## 7变3

7变3是指，**配网**过程中，7个步骤合并成3个，提高配网成功率和用户体验

- 若美居已下载过插件页(页面控件) - 3步
  1. 添加设备，登录美居并扫描设备二维码
  2. 连接设备
  3. 配网完成
- 若美居未下载过插件页(新用户) - 7步
  1. 添加设备，登录美居并扫描设备二维码
  2. 连接设备
  3. 配网完成
  4. 进入美居，加载插件
  5. 美居自动下载插件(即显示出设备图片)
  6. 美居提示确权
  7. 设备确权(按键确定)

> 7-正常配网需要7步
>
> 3-即通过设备二维码配网只需3步（貌似跟7步没啥关系）

## WIFI靠近配网

## 蓝牙一键配网

## 蓝牙直连控制

------

（M-Smart标准协议，优先支持美居）

## NT无感配网-OPPO手机

------

模组WIFI广播指定信息，手机获取广播信息，并从云端获取预设密钥，使用预设密钥，下发SSID配网信息给模组，模组使用预设密钥解密，获取配网信息，并配网。

目前，支持OPPO手机，涉及概念：云云交互。详见《NT无感配网.md》

* 流程理解

1, 设备WIFI广播， OPPO手机检测到后，发到OPPO云，OPPO云与美的云“云云交互”，OPPO手机获得设备公钥。

2, OPPO手机将配网信息( SSID,KEY)+手机公钥(明文）+ （美的字段+ 设备数字签名“OK”）（设备公钥加密密文）等发给设备。

3, 设备用设备私钥解密数字签名段，验证成功。

4, 设备入网。

5, 设备用手机公钥加密数据上报OPPO手机。

* 通信安全

预设密钥，存储在设备端和云端，设备端用于生成设备私钥，云端用于生成设备公钥(给OPPO用）

> 设备端：设备预设密钥，存在设备FLASH中，采用指定算法，可计算出设备密钥。
>
> 美居APP-SDK： 存储/或从云端获取8组设备公钥派生。当OPPO手机底层需要时，传给OPPO手机底层。

设备广播, 带随机密钥组号(0-7) （我猜，应该是BLE广播帧长度限制，不能在广播中携带设备公钥）

OPPO跟SDK获取设备公钥

OPPO手机将配网信息( SSID,KEY)+手机公钥(明文）+ （美的字段+ 设备数字签名“OK”）（设备公钥加密密文）等发给设备。

设备用设备私钥解密数字签名段，验证成功。并存储OPPO公钥，完成密钥交换。

（以上为大概猜测）

## 鸿蒙FA配网

------



## UDP配网功能

------

当前微信UDP接口免费开放，TCP接口收费。集团战略规划在微信小程序上增加配网功能，
如果使用TCP通道配网则需要每年向微信支付200万元。
为了解决微信这种卡脖问题，计划通过UDP通道配网。

大致流程：

1. 模组起热点
2. APP连接热点，通过007A查看模组是否具备UDP配网功能。
3. APP通过UDP发送配网信息
4. 模组切换到STA，并连接云端，**发起设备绑定流程**

> UDP配网功能与正常的TCP配网功能相比，主要区别在于，UDP配网的设备绑定流程发送在模组和云端之间，而TCP配网的设备绑定流程发生在模组与APP之间

## ADS服务器切换

云端新增服务:ADS(apply domain_name server），用于给模组提供获取有效登录接入层的域名，服务可以扩展到多个集群中心，支撑亿级连接。

流程及关键指令：

1. 0x0050 -模组配置参数上报， 模组告知APP自己有ADS功能
2. 0x0070 -设备入网(TCP)-，APP下发服务器域名给模组


## 波特率协商

------

关键串口指令-波特率协商指令：0x1D-0x00/01/02/03


| 0x01 | 电控 ——> 模块 | 电控请求协商波特率     |
| ---- | ------------- | ---------------------- |
| 0x01 | 电控 ——> 模块 | 电控请求确认波特率协商 |
| 0x02 | 电控 ——> 模块 | 电控确认完成波特率协商 |
| 0x03 | 电控 ——> 模块 | 心跳包                 |



## 支持云端环境切换

------

msmart v2.2版本新增WPS功能，取代了该云端环境切换功能。





## 防误触功能

------

## 电控OTA和模组OTA资料库

* 模组OTA固件版本号标准文档：

>  MSmart-Public-IoT_事业部模组文档同步\01.软件\04.固件版本号管控及标识码申请表
>
> 美集IoT字[2019]073号 关于模组固件版本号管控的通知.doc

* 电控OTA固件版本号参考：

  > MSmart-Public-IoT_事业部模组文档同步\01.软件\07.电控OTA协议文档\电控OTA版本号规则定义（2021年5月26日更新）
  >
  > 电控OTA版本号规则定义(2021年5月26日更新).pdf

备注：研发叶楚汉提供的模组OTA固件版本号前3字节，如120004，后3字节由用户定义，云端只判断前6字节，小版本号不判断。



## OTA安全-SST & Https

------

OTA安全有两个功能选择 SST 和 Https, 分别由两个宏控制。

* `MS_OTA_USE_SECURE` - 默认为true

涉及指令： 模块上报安全功能版本号子命令-0x0051

模组上报1）自身是否支持固件完整性认证或签名认证功能，2）自身是否支持https

云端根据模组能力(0051)，下发指定的url（http或https），下发认证信息等。

* `MS_OTA_HTTPS_SUPPORT` - 可选

涉及指令： 模块上报安全功能版本号子命令-0x0051

云端根据模组能力(0051)，下发指定的url（http或https）

> * MS_OTA_USE_SECURE & MS_OTA_HTTPS_SUPPORT 如何选？
>
> 1）使能MS_OTA_USE_SECURE后，固件完整性已有保障，MS_OTA_HTTPS_SUPPORT可选可不选。
>
> 2）不使能MS_OTA_USE_SECURE，固件完整性无保障，MS_OTA_HTTPS_SUPPORT可不选(因为选了也没用，数据安全了，但完整性无保障)



## OTA升级 - 局域网模组固件OTA

------



## OTA升级 - 广域网模组固件OTA

------



## OTA升级 - 电控OTA

------



## OTA升级 - 电控OTA - A/B分区

---

## OTA升级 - 电控OTA - 单分区

---

模组通知家电下载文件-子命令：90-02， 模组回复内容**0x02：切换时下载** 表示电控为单区

模组上报0002-0047，通知云端和美居已缓存新固件，美居提示用户可选择新固件。



```sequence
title: 电控OTA
电控-->模组:
模组-->云端:
云端-->美居:

模组->电控:90-02
电控-->模组:90-02:\n 02：切换时下载, 表示电控为单区

模组->云端: 0002-0047:通知模组已缓存新固件
云端->美居: 通知美居
美居->美居: 界面显示有可用新固件


```







##  OTA升级 - 产线OTA

------

## 自动切换接入云服务器

------



## 美的AP信息

------

* 默认AP信道                                                       1
* 默认AP SSID名称                                              midea_品类_SN
* 默认AP密码                                                      12345678
* xxx到起AP时间                                                  7s
* 配网后，重连路由，默认连接RSSI最强的同名热点             是
* 支持5G SSID的模糊匹配                                                   是
* 平均配网时长（从进入美居配网进度条到美居提示完成)     15s
* 需要达到的配网成功率（美的AP模式/BLE模式）               98%
* （WIFI+BLE模组）上电后，Wi-Fi默认
  为AP，蓝牙确权后，AP有效时间                                      10min
* （WIFI+BLE模组）上电后，Wi-Fi默认
  为AP，蓝牙确权后，蓝牙配网的有效
  时间                                                                                 60min
* （WIFI+BLE模组）上电后，确权前的
  蓝牙广播有效时间                                                             60min



## 蓝牙功能

------

* 默认蓝牙设备名称                                            midea
* 最大通信数据包                                               128Byte
* 手机通过蓝牙直连数据透传功能（控制
  、查询、上报）                                               是
  *

## 三端日志

三端日志记录配网及网络方面异常问题

* 指令为：0055

* 工具有，三端日志解析工具，instructions_0055.exe。用法：在开发者平台管理后台，通过SN查看日志，找到异常时间之后的0055指令，复制指令内容到解析工具，查看解析结果。

  > 通过平台日志可以看到完整net交互命令。


## 全链路埋点

代码中的埋点列表：`E_MsControlLinkErrorCode`

主要用于记录内部链路状态，比如用于统计透传数据成功率。

## 错误码

由errcode(错误码)组件提供相关功能，主要用于记录配网失败原因

文档见：错误码映射.xlsx


# 模组固件版本号规范(9bytes)

> 资料：模组固件版本号管控.doc
>
> 串口获取固件版本号指令-87指令
>
> 固件版本号格式, 由IOT和事业部各自定义一部分，用于OTA升级

示例：070102042000000026

即： 07 0102 - 042000 - 000026

固件版本格式：

**IoT定义**：

07 - 固件标识码

0102 - 硬件及协议栈配置信息

**事业部定义**：

04 - 软件版本

20 - 软件发布日期-年

00 - 软件发布日期-周

**开发记录版本**（云端不识别）：

00 - 框架版本

00 - 功能增加

26 - 缺陷修改

# 本地联动-不可连接广播 - BLE

> 日志关键字：
>
> ms_ble_rc4_crypt|->:
>
> ms_ble_scan_nonconn_adv_parse|rc4 Pre-processing data|mac]



数据帧格式：

```c
/*业务层*/
typedef struct
{
    uint8_t bf_type;   //业务类型 - 0x01
    uint8_t bf_ver;    //业务类型版本 - 0x01
    uint8_t category;  //品类码
    uint8_t adv_type;  //广播类型： 0-数据广播 1-配对广播
    uint8_t data[];    //用户数据
} ms_ble_nonconn_adv_bfp_data_t;
```

```c
/*完整的广播帧内容，31字节*/
typedef struct
{
    uint8_t ad_len;        //!< adv data len or scan rsp data len
    uint8_t ad_type;       //广播类型： 0x16 - 服务数据 （0x01-蓝牙类型标识，0xFF-厂家自定义）
    uint8_t ad_uuid[2];    //0xFD24 - 应用数据交互使用，如电控透传等
    uint8_t sm_type;       //0x02 - RC4加解密算法
    uint8_t sm_ver;        //0x00 - 默认
    uint8_t tid;           //MID 重放校验 - 帧计数 （1~255）
    uint8_t rc4[];         //业务层数据(加密) - 见上面结构体：ms_ble_nonconn_adv_bfp_data_t
} ms_ble_nonconn_adv_data_t;
```

字节长度：7+{4+n} = 11+n，(n<16)

举例：一个模组广播数据，一个模组扫描数据，如果带业务层数据，接收端会解密，并打印MAC地址。如果不带业务数据，则不会打印MAC地址，需注意这点。

```c
///发送端
[rc4 Pre-processing data][14]->:            01 01 c0 00 01 02 03 04 05 06 07 08 09 0a //原始业务数据
[rc4 Processed data][14]->:                 0b 8e 2f 03 60 6a 4e fa ba ad 6b 74 b0 6f //业务数据加密
[nonconn adv][21]->: 14 16 24 fd 02 00 01   0b 8e 2f 03 60 6a 4e fa ba ad 6b 74 b0 6f //完整广播帧

```

```c
///接收端
<D>ms [Task_B]:ms_ble_app_scan_data_process m_node 20fd3088
[D] [BLE_SCAN] : ms_ble_scan_nonconn_adv_parse
[D] [BLE_RC4] : ms_ble_rc4_crypt
[rc4 K1][8]->: 3d d5 21 1b e8 08 10 da 
[rc4 Pre-processing data][14]->:           0b 8e 2f 03 60 6a 4e fa ba ad 6b 74 b0 6f //业务数据-已加密
[rc4 Processed data][14]->:                01 01 c0 00 01 02 03 04 05 06 07 08 09 0a //原始业务数据-已解密
[D] [BLE_SCAN] : category c0
[D] [BLE_SCAN] : rssi -46
[D] [BLE_SCAN] : tid 1
[D] [BLE_SCAN] : adv_type 0
[mac][6]->: da 10 08 e8 3a 2c    //对应的MAC地址
[controler data][10]->: 01 02 03 04 05 06 07 08 09 0a //用户数据
```



### 操作流程

1. 测试1

设备A发送配对广播，设备B扫描设备A的配对广播（指定MAC），下面是设备B的电控日志：

```c
[2021-12-28 11:18:30.391] 发送数据: 
AA 16 FF E9 00 00 00 00 00 21 03 01 01 06 00 06 A3 1C 22 93 20 3C 00  //开启配对广播扫描，扫描对端的MAC地址为：A3 1C 22 93 20 3C

[2021-12-28 11:18:30.504] 收到数据：
AA 0C FC F0 00 00 00 00 00 21 03 00 E4 

[2021-12-28 11:18:30.674] 收到数据：
AA 1E FC E2 00 00 04 00 00 0D 01 03 00 01 01 A8 C0 00 01 01 00 00 00 03 00 00 01 00 00 00 7F //状态通知, 已开启扫描
消息类型：模组联网状态通知
蓝牙状态：已开启可连接广播 已开启扫描  

[2021-12-28 11:18:30.791] 收到数据：
AA 1F FC E3 00 00 05 00 00 21 11 01 FC A3 1C 22 93 20 3C D6 0A 01 02 03 04 05 06 07 08 09 0A E7 //已扫描到设备A3 1C 22 93 20 3C的配对广播
```

2. 测试2 

设备A发送配对广播，设备B扫描空中所有配对广播（不指定MAC），下面是设备B的电控日志：

```c
[2021-12-28 11:21:19.127] 发送数据: 
AA 0D FF F2 00 00 00 00 00 21 03 01 00 DD //开启配对广播扫描，扫描所有配对广播帧

[2021-12-28 11:21:19.216] 收到数据：
AA 0C FC F0 00 00 00 00 00 21 03 00 E4 

[2021-12-28 11:21:19.346] 收到数据：
AA 1E FC E2 00 00 0D 00 00 0D 01 03 00 01 01 A8 C0 00 01 01 00 00 00 03 00 00 01 00 00 00 76 //状态通知, 已开启扫描
消息类型：模组联网状态通知
蓝牙状态：已开启可连接广播 已开启扫描 

[2021-12-28 11:21:26.066] 收到数据：
AA 1F FC E3 00 00 0E 00 00 21 11 01 FC A3 1C 22 93 20 3C D4 0A 01 02 03 04 05 06 07 08 09 0A E0 //已扫描到设备A3 1C 22 93 20 3C的配对广播
```

> 注意，标准模组电控口读取的MAC地址，数据流上是小端，但解析显示是大端。组本地联动电控帧时需要注意用小端。



# 家电找朋友

目前仅支持: 方案一,通过SoftAP的方式进行配网, 暂不支持BLE配网

![](image/MSmart%E5%8A%9F%E8%83%BD%E5%88%97%E8%A1%A8/1631527351106.png)



# BLE协议关键字

------

## 家庭ID

家庭ID信息为家庭识别码，云端采用long数据类型进行定义，共8Byte。网桥和子设备的挂靠是基于同一家庭ID进行区分；

## 设备ID

设备ID信息为设备识别码，云端采用long数据类型进行定义，共8Byte。子设备和云端通讯基于设备ID区分。

## 绑定码

设备绑定码由外设随机生成，共16Byte。外设每次重置SDK或者重置设备绑定码时都应重新生成设备绑定码。



# 串口协议(Part1)与网络协议(Part2)的关系

------

这里以WB01-V2.1代码为例，说明串口命令与网络透传数据的关系。

1. (串口收)**==0x04, 0x06==** 无应答 --> MS_APP_MSG_NOTIFY_A2X_STAT_NOACK -->  (用户) ENUM_MS_NETAPP_EVENT_REPORT_NOACK -->(SDK)MS_NETWORK_CMD_DEVICE_UPDATE_STATUS(**==0x0040==**) - 模组发起，无需应答

2. (串口收)**==0x05, 0x0A==** 有应答 --> MS_APP_MSG_NOTIFY_A2X_STAT -->  (用户) ENUM_MS_NETAPP_EVENT_REPORT_ACK -->(SDK)MS_NETWORK_CMD_DEVICE_ERROR(**==0x0044==**) - 模组发起需云端应答

3. (串口收) **==0x02、0x03、0x11==** 云端透传 --> MS_APP_MSG_RESPONSE_A2X_TRANSDATA --> (用户)ENUM_MS_NETAPP_EVENT_TRANS v --> (SDK)MS_NETWORK_CMD_C2D_TRANSDATA(**==0x8020==**)  -  云端发起，模组只应答

# 模组日志 - 打开日志方法

烧录串口 接串口调试器 连接到电脑，波特率115200.

注意：

(1) 对于sit版本的固件，默认是所有的Log都开启。

(2) 对于正式版本的固件，默认只开启少量Log. 如果需要开启所有Log，需要在烧录串口发送

如下指令：AT+LOG “MAC+固件版本”

如：针对阿里 或者美居版本

其中二进制的组合格式：MAC地址 + 模组版本号， 比如：下面的意思是MAC:3C2093F70C6F, 固件版本号059006042118

```
AT+LOG 3C2093F70C6F059006042118 
//当成功时，则输出log_enable字样。
```

针对鸿蒙版本

```
AT+LOG=502DBBF70F97059008012110
```



# BLE uECC与Mbedtls的关系

```c
//ms_sal_ble_common.c
#ifdef MS_CONFIG_UECC_SUPPORT //如果定义了UECC，则使用UECC接口实现ECDH
#include "ms_uECC.h" //UECC接口
void ms_sal_ble_ecdh_generate_keys_secp256r1(uint8_t *p_publicKey, uint8_t *p_privateKey)
void ms_sal_ble_ecdh_shared_secret_secp256r1(uint8_t *p_publicKey, uint8_t *p_privateKey, uint8_t *p_sessionKey)

#else //如果没有定义UECC，则使用MBEDTLS实现ECDH
#include "mbedtls/aes.h"
#include "mbedtls/rsa.h"
#include "mbedtls/ctr_drbg.h"
#include "mbedtls/entropy.h"
#include "mbedtls/ecdsa.h"
#include "mbedtls/ecp.h"
#include "mbedtls/ecdh.h"
void ms_sal_ble_ecdh_generate_keys_secp256r1(uint8_t *p_publicKey, uint8_t *p_privateKey)
void ms_sal_ble_ecdh_shared_secret_secp256r1(uint8_t *p_publicKey, uint8_t *p_privateKey, uint8_t *p_sessionKey)
#endif
    
//另外uECC也用于RCU和NT配网
```



* 什么是uECC？

  ECC的英文全称是: Elliptic Curve Cryptography - 椭圆曲线**密码学**，是基于有限域的椭圆曲线和复杂的椭圆曲线离散对数.

  ECC实现了非对称加密所需要的大部分能力，包括: 加密(encryption)、签名(signatures )、秘钥交换(key exchange).

  ECC被认为是RSA密码系统的最好继承者，相对于RSA，ECC的keys更小，在于RSA相同等级下能够更快地生成Key
  在ECC中，密钥生成就像在一定范围内安全地生成一个随机整数一样简单，所以这个过程非常的快. 

  ECC 中涉及的椭圆曲线中，非常出名的有，**sepc256k1**、Curve25519等.

* 什么是ECDH?

  ECDH密钥协商**算法**基于椭圆曲线密码系统（ECC），使用较短的密钥长度可提供与RSA或DH算法同等的安全等级，密钥长度位160 ~ 256比特的椭圆曲线算法与密钥长度位1024 ~ 3072比特的非ECC算法安全强度相同

  ECC算法用途比RSA还猛，不仅可以加解密、签名验证。还可以与DH结合使用，用于密钥磋商，这个密钥交换算法称为ECDH。

  > ECC一种密码学算法，使数据安全，ECDH是基于ECC的一种密钥协商算法。

* mbedtls是什么？

  > link:https://blog.csdn.net/chengjunchengjun/article/details/111348713
  >
  > * 先了解下SSL/TLS:  SSL和TLS指的是同一套加密协议，只是不同时期的名字差异。
  >
  >   1996年，在前面的基础上，SSL 3.0版问世并得到大规模应用（主要用于网络通信）
  >
  >   1999年，发布了SSL的升级版TLS 1.0版，也称为SSL 3.1； 
  >
  >   2006年和2008年，TLS进行了两次升级，分别为TLS 1.1版和TLS 1.2版。
  >
  >   一般推荐使用TLS 1.2，主流的浏览器都支持。
  >
  > * 再了解一下http和https
  >
  >   在SSL/TLS出现之前，很多应用层协议（http、ftp、smtp等）都存在着网络安全问题。最常见的http协议，在传输过程中使用的是明文信息。
  >
  >   应用层和传输层之间加入了SSL/TLS协议，升级为https协议（https协议的由来）
  >
  > * 最后了解一下openSSL，互联网的加密库，功能强大但耗资源。

  mbedtls开源加密库，功能类似openSSL，使用 C 编程语言以最小的编码占用空间实现了 SSL/TLS 功能及各种加密算法，易于理解、使用、集成和扩展，方便开发人员轻松地在嵌入式产品中使用 SSL/TLS 功能。其功能包括。

  - 完整的 SSL v3、TLS v1.0、TLS v1.1 和 TLS v1.2 协议实现
  - X.509 证书处理
  - 基于 TCP 的 TLS 传输加密
  - 基于 UDP 的 DTLS（Datagram TLS）传输加密
  - **其它加解密库实现 -- （如ecdh）**

# BLE添加服务的流程

1. FF80 - 添加服务
2. 2803 - 特征声明 - 每添加一个特征值前先发送该声明给底层
3. FF81 - 特征值（可写有回调）
4. 2901 - 特征值描述符
5. 2803 - 特征声明 - （跟前面一样，声明下一个特征）
6. FF82 - 特征值 （notify）
7. 2901 - [option]特征值描述符
8. 2902 - 客户端描述符（特征值为notify属性时需要添加）
9. ...

# 缩写

## PRD - 产品需求文档（Product Requirement Document）

---

---

---

---

---

---